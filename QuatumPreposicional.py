import tkinter as tk
from tkinter import messagebox
from tkinter import scrolledtext

def show_propositions(conectivo):
    # Obtener las proposiciones atómicas de las entradas de texto
    p = p_entry.get()
    q = q_entry.get()
    r = r_entry.get()
    s = s_entry.get()
    # Crear una lista vacía para almacenar las proposiciones moleculares
    propositions = []

    if conectivo == "negación":
        propositions.append(f"Es falso que {p} (¬p)")
        propositions.append(f"Es falso que {q} (¬q)")
        propositions.append(f"Es falso que {r} (¬r)")
        propositions.append(f"Es falso que {s} (¬s)")
    elif conectivo == "disyunción":
        propositions.append(f"{p} o {q} (p ∨ q)")
        propositions.append(f"{p} o {r} (p ∨ r)")
        propositions.append(f"{p} o {s} (p ∨ s)")
        propositions.append(f"{q} o {r} (q ∨ r)")
        propositions.append(f"{q} o {s} (q ∨ s)")
        propositions.append(f"{q} o {p} (q ∨ p)")
        propositions.append(f"{r} o {s} (r ∨ s)")
        propositions.append(f"{r} o {p} (r ∨ p)")
        propositions.append(f"{r} o {q} (r ∨ q)")
        propositions.append(f"{s} o {p} (s ∨ p)")
        propositions.append(f"{s} o {q} (s ∨ q)")
        propositions.append(f"{s} o {r} (s ∨ r)")
    elif conectivo == "conjunción":
        propositions.append(f"{p} y {q} (p ∧ q)")
        propositions.append(f"{p} y {r} (p ∧ r)")
        propositions.append(f"{p} y {s} (p ∧ s)")
        propositions.append(f"{q} y {r} (q ∧ r)")
        propositions.append(f"{q} y {s} (q ∧ s)")
        propositions.append(f"{q} y {p} (q ∧ p)")
        propositions.append(f"{r} y {s} (r ∧ s)")
        propositions.append(f"{r} y {p} (r ∧ p)")
        propositions.append(f"{r} y {q} (r ∧ q)")
        propositions.append(f"{s} y {p} (s ∧ p)")
        propositions.append(f"{s} y {q} (s ∧ q)")
        propositions.append(f"{s} y {r} (s ∧ r)")
    elif conectivo == "condicional":
        propositions.append(f"Si {p}, entonces {q} (p → q)")
        propositions.append(f"Si {p}, entonces {r} (p → r)")
        propositions.append(f"Si {p}, entonces {s} (p → s)")
        propositions.append(f"Si {q}, entonces {r} (q → r)")
        propositions.append(f"Si {q}, entonces {s} (q → s)")
        propositions.append(f"Si {q}, entonces {p} (q → p)")
        propositions.append(f"Si {r}, entonces {s} (r → s)")
        propositions.append(f"Si {r}, entonces {p} (r → p)")
        propositions.append(f"Si {r}, entonces {q} (r → q)")
        propositions.append(f"Si {s}, entonces {p} (s → p)")
        propositions.append(f"Si {s}, entonces {q} (s → q)")
        propositions.append(f"Si {s}, entonces {r} (s → r)")
    elif conectivo == "bicondicional":
        propositions.append(f"{p} si y solo si {q} (p ↔ q)")
        propositions.append(f"{p} si y solo si {r} (p ↔ r)")
        propositions.append(f"{p} si y solo si {s} (p ↔ s)")
        propositions.append(f"{q} si y solo si {r} (q ↔ r)")
        propositions.append(f"{q} si y solo si {s} (q ↔ s)")
        propositions.append(f"{q} si y solo si {p} (q ↔ p)")
        propositions.append(f"{r} si y solo si {q} (r ↔ q)")
        propositions.append(f"{r} si y solo si {s} (r ↔ s)")
        propositions.append(f"{r} si y solo si {p} (r ↔ p)")
        propositions.append(f"{s} si y solo si {p} (s ↔p)")
        propositions.append(f"{s} si y solo si {q} (s ↔ q)")
        propositions.append(f"{s} si y solo si {r} (s ↔ r)")

    # Actualizar el contenido de la etiqueta de proposiciones moleculares
    propositions_label.config(text="\n".join(propositions))

def clear_propositions():
    # Borrar el contenido de la etiqueta de proposiciones moleculares
    propositions_label.config(text="")
    p_entry.delete(0,tk.END)
    q_entry.delete(0,tk.END)
    r_entry.delete(0,tk.END)
    s_entry.delete(0,tk.END)


def show_all_propositions():
    # Obtener las proposiciones atómicas de las entradas de texto
    p = p_entry.get()
    q = q_entry.get()
    r = r_entry.get()
    s = s_entry.get()
    # Crear una lista para almacenar todas las proposiciones moleculares generadas por los otros botones
    all_propositions = []
    # Generar todas las proposiciones moleculares utilizando los otros botones
    propositions = []
    def generar_posibilidades():
        variables = ['p', 'q', 'r', 's']
        operadores = ['Es falso que', 'y', 'o', 'si','si solo si']

    # Generar todas las combinaciones posibles de operadores
        combinaciones_operadores = []
        for op1 in operadores:
            for op2 in operadores:
                for op3 in operadores:
                    combinaciones_operadores.append([op1, op2, op3])

    # Generar todas las combinaciones posibles de variables y operadores
        propositions = []
        for var1 in variables:
            for var2 in variables:
                for var3 in variables:
                    for var4 in variables:
                        for operadores in propositions:
                            expresion = f"{var1} {operadores[0]} {var2} {operadores[1]} {var3} {operadores[2]} {var4}"
                            propositions.append(expresion)    

    
    propositions.append(f"Es falso que {p} (¬p)")
    propositions.append(f"Es falso que {q} (¬q)")
    propositions.append(f"Es falso que {r} (¬r)")
    propositions.append(f"Es falso que {s} (¬s)")
    propositions.append(f"Es falso que {p} o {q} (¬p ∨ q)")
    propositions.append(f"Es falso que {p} o {r} (¬p ∨ r)")
    propositions.append(f"Es falso que {p} o {s} (¬p ∨ s)")
    propositions.append(f"Es falso que {q} o {p} (¬q ∨ p)")
    propositions.append(f"Es falso que {q} o {r} (¬q ∨ r)")
    propositions.append(f"Es falso que {q} o {s} (¬q ∨ s)")
    propositions.append(f"Es falso que {r} o {p} (¬r ∨ p)")
    propositions.append(f"Es falso que {r} o {q} (¬r ∨ q)")
    propositions.append(f"Es falso que {r} o {s} (¬r ∨ s)")
    propositions.append(f"Es falso que {s} o {p} (¬s ∨ p)")
    propositions.append(f"Es falso que {s} o {q} (¬s ∨ q)")
    propositions.append(f"Es falso que {s} o {r} (¬s ∨ r)")
    propositions.append(f"Es falso que {p} y {q} (¬p ∧ q)")
    propositions.append(f"Es falso que {p} y {r} (¬p ∧ r)")
    propositions.append(f"Es falso que {p} y {s} (¬p ∧ s)")
    propositions.append(f"Es falso que {q} y {p} (¬q ∧ p)")
    propositions.append(f"Es falso que {q} y {r} (¬q ∧ r)")
    propositions.append(f"Es falso que {q} y {s} (¬q ∧ s)")
    propositions.append(f"Es falso que {r} y {p} (¬r ∧ p)")
    propositions.append(f"Es falso que {r} y {q} (¬r ∧ q)")
    propositions.append(f"Es falso que {r} y {s} (¬r ∧ s)")
    propositions.append(f"Es falso que {s} y {p} (¬s ∧ p)")
    propositions.append(f"Es falso que {s} y {q} (¬s ∧ q)")
    propositions.append(f"Es falso que {s} y {r} (¬s ∧ r)")
    propositions.append(f"Es falso que {p} si {q} (¬p → q)")
    propositions.append(f"Es falso que {p} si {r} (¬p → r)")
    propositions.append(f"Es falso que {p} si {s} (¬p → s)")
    propositions.append(f"Es falso que {q} si {p} (¬q → p)")
    propositions.append(f"Es falso que {q} si {r} (¬q → r)")
    propositions.append(f"Es falso que {q} si {s} (¬q → s)")
    propositions.append(f"Es falso que {r} si {p} (¬r → p)")
    propositions.append(f"Es falso que {r} si {q} (¬r → q)")
    propositions.append(f"Es falso que {r} si {s} (¬r → s)")
    propositions.append(f"Es falso que {s} si {p} (¬s → p)")
    propositions.append(f"Es falso que {s} si {q} (¬s → q)")
    propositions.append(f"Es falso que {s} si {r} (¬s → r)")
    propositions.append(f"Es falso que {p} si y solo s {q} (¬p ↔ q )")
    propositions.append(f"Es falso que {p} si y solo si {r} (¬p ↔ r )")
    propositions.append(f"Es falso que {p} si y solo si {s} (¬p ↔ s )")
    propositions.append(f"Es falso que {q} si y solo si {p} (¬q ↔ p )")
    propositions.append(f"Es falso que {q} si y solo si {r} (¬q ↔ r )")
    propositions.append(f"Es falso que {q} si y solo si {s} (¬q ↔ s )")
    propositions.append(f"Es falso que {r} si y solo si {p} (¬r ↔ p)")
    propositions.append(f"Es falso que {r} si y solo si {p} (¬r ↔ q )")
    propositions.append(f"Es falso que {r} si y solo si {s} (¬r ↔ s )")
    propositions.append(f"Es falso que {s} si y solo s {p} (¬s ↔ p )")
    propositions.append(f"Es falso que {s} si y solo s {q} (¬s ↔ q )")
    propositions.append(f"Es falso que {s} si y solo s {r} (¬s ↔ r )")
    propositions.append(f"{p} o no {q} (p ∨ ¬q )")
    propositions.append(f"{p} o no {r} (p ∨ ¬r )")
    propositions.append(f"{p} o no {s} (p ∨ ¬s )")
    propositions.append(f"{q} o no {p} (q ∨ ¬p )")
    propositions.append(f"{q} o no {r} (q ∨ ¬r )")
    propositions.append(f"{q} o no {s} (q ∨ ¬s )")
    propositions.append(f"{r} o no {p} (r ∨ ¬p)")
    propositions.append(f"{r} o no {q} (r ∨ ¬q )")
    propositions.append(f"{r} o no {s} (r ∨ ¬s )")
    propositions.append(f"{s} o no {p} (s ∨ ¬p)")
    propositions.append(f"{s} o no {q} (s ∨ ¬q)")
    propositions.append(f"{s} o no {r} (s ∨ ¬r)")
    propositions.append(f"{p} y no {q} (p ∧ ¬q )")
    propositions.append(f"{p} y no {r} (p ∧ ¬r )")
    propositions.append(f"{p} y no {s} (p ∧ ¬s )")
    propositions.append(f"{q} y no {p} (q ∧ ¬p )")
    propositions.append(f"{q} y no {r} (q ∧ ¬r )")
    propositions.append(f"{q} y no {s} (q ∧ ¬s )")
    propositions.append(f"{r} y no {p} (r ∧ ¬p)")
    propositions.append(f"{r} y no {p} (r ∧ ¬q )")
    propositions.append(f"{r} y no {s} (r ∧ ¬s )")
    propositions.append(f"{s} y no {p} (s ∧ ¬p)")
    propositions.append(f"{s} y no {q} (s ∧ ¬q)")
    propositions.append(f"{s} y no {r} (s ∧ ¬r)")
    propositions.append(f"{p} si no {q} (p → ¬q )")
    propositions.append(f"{p} si no {r} (p → ¬r )")
    propositions.append(f"{p} si no {s} (p → ¬s )")
    propositions.append(f"{q} si no {p} (q → ¬p )")
    propositions.append(f"{q} si no {r} (q → ¬r )")
    propositions.append(f"{q} si no {s} (q → ¬s )")
    propositions.append(f"{r} si no{p} (r → ¬p)")
    propositions.append(f"{r} si no {q} (r → ¬q)")
    propositions.append(f"{r} si no {s} (r → ¬s)")
    propositions.append(f"{s} si no {p} (s → ¬p)")
    propositions.append(f"{s} si no {q} (s → ¬q)")
    propositions.append(f"{s} si no {r} (s → ¬r)")
    propositions.append(f"{p} si y solo si no {q} (p ↔ ¬q )")
    propositions.append(f"{p} si y solo si no {r} (p ↔ ¬r )")
    propositions.append(f"{p} si y solo si no {s} (p ↔ ¬s )")
    propositions.append(f"{q} si y solo si no {p} (q ↔ ¬p )")
    propositions.append(f"{q} si y solo si no {r} (q ↔ ¬r )")
    propositions.append(f"{q} si y solo si no {s} (q ↔ ¬s )")
    propositions.append(f"{r} si y solo si no {p} (r ↔ ¬p)")
    propositions.append(f"{r} si y solo si no {q} (r ↔ ¬q )")
    propositions.append(f"{r} si y solo si no {s} (r ↔ ¬s )")
    propositions.append(f"{s} si y solo si no {p} (s ↔ ¬p)")
    propositions.append(f"{s} si y solo si no {q} (s ↔ ¬q)")
    propositions.append(f"{s} si y solo si no {r} (s ↔ ¬r)")
    propositions.append(f"Es falso que {p} o no {q} ¬(p ∨ q )")
    propositions.append(f"Es falso que {p} o no {r} ¬(p ∨ r )")
    propositions.append(f"Es falso que {p} o no {s} ¬(p ∨ s )")
    propositions.append(f"Es falso que {q} o no {p} ¬(q ∨ p )")
    propositions.append(f"Es falso que {q} o no {r} ¬(q ∨ r )")
    propositions.append(f"Es falso que {q} o no {s} ¬(q ∨ s )")
    propositions.append(f"Es falso que {r} o no {p} ¬(r ∨ p)")
    propositions.append(f"Es falso que {r} o no {q} ¬(r ∨ q )")
    propositions.append(f"Es falso que {r} o no {s} ¬(r ∨ s )")
    propositions.append(f"Es falso que {s} o no {p} ¬(s ∨ p)")
    propositions.append(f"Es falso que {s} o no {q} ¬(s ∨ q)")
    propositions.append(f"Es falso que {s} o no {r} ¬(s ∨ r)")
    propositions.append(f"Es falso que {p} y no {q} ¬(p ∧ q )")
    propositions.append(f"Es falso que {p} y no {r} ¬(p ∧ r )")
    propositions.append(f"Es falso que {p} y no {s} ¬(p ∧ s )")
    propositions.append(f"Es falso que {q} y no {p} ¬(q ∧ p )")
    propositions.append(f"Es falso que {q} y no {r} ¬(q ∧ r )")
    propositions.append(f"Es falso que {q} y no {s} ¬(q ∧ s )")
    propositions.append(f"Es falso que {r} y no {p} ¬(r ∧ p)")
    propositions.append(f"Es falso que {r} y no {q} ¬(r ∧ q )")
    propositions.append(f"Es falso que {r} y no {s} ¬(r ∧ s )")
    propositions.append(f"Es falso que {s} y no {p} ¬(s ∧ p )")
    propositions.append(f"Es falso que {s} y no {q} ¬(s ∧ q )")
    propositions.append(f"Es falso que {s} y no {r} ¬(s ∧ r )")
    propositions.append(f"Es falso que {p} si no {q} ¬(p → q )")
    propositions.append(f"Es falso que {p} si no {r} ¬(p → r )")
    propositions.append(f"Es falso que {p} si no {s} ¬(p → s )")
    propositions.append(f"Es falso que {q} si no {p} ¬(q → p )")
    propositions.append(f"Es falso que {q} si no {r} ¬(q → r )")
    propositions.append(f"Es falso que {q} si no {s} ¬(q → s )")
    propositions.append(f"Es falso que {r} si no{ p} ¬(r → p)")
    propositions.append(f"Es falso que {r} si no {q} ¬(r → q)")
    propositions.append(f"Es falso que {r} si no {s} ¬(r → s)")
    propositions.append(f"Es falso que {s} si no {p} ¬(s → p)")
    propositions.append(f"Es falso que {s} si no {q} ¬(s → q)")
    propositions.append(f"Es falso que {s} si no {r} ¬(s → r)")
    propositions.append(f"Es falso que {p} si y solo si no {q} ¬(p ↔ q )")
    propositions.append(f"Es falso que {p} si y solo si no {r} ¬(p ↔ r )")
    propositions.append(f"Es falso que {p} si y solo si no {s} ¬(p ↔ s )")
    propositions.append(f"Es falso que {q} si y solo si no {p} ¬(q ↔ p )")
    propositions.append(f"Es falso que {q} si y solo si no {r} ¬(q ↔ r )")
    propositions.append(f"Es falso que {q} si y solo si no {s} ¬(q ↔ s )")
    propositions.append(f"Es falso que {r} si y solo si no {p} ¬(r ↔ p)")
    propositions.append(f"Es falso que {r} si y solo si no {q} ¬(r ↔ q )")
    propositions.append(f"Es falso que {r} si y solo si no {s} ¬(r ↔ s )")
    propositions.append(f"Es falso que {s} si y solo si no {p} ¬(s ↔ p )")
    propositions.append(f"Es falso que {s} si y solo si no {q} ¬(s ↔ q )")
    propositions.append(f"Es falso que {s} si y solo si no {r} ¬(s ↔ r )")
    
    
    all_propositions.extend(propositions)
    
    propositions = []
    propositions.append(f"{p} o {q} (p ∨ q)")
    propositions.append(f"{p} o {r} (p ∨ r)")
    propositions.append(f"{p} o {s} (p ∨ s)")
    propositions.append(f"{q} o {p} (q ∨ p)")
    propositions.append(f"{q} o {r} (q ∨ r)")
    propositions.append(f"{q} o {s} (q ∨ s)")
    propositions.append(f"{r} o {p} (r ∨ p)")
    propositions.append(f"{r} o {q} (r ∨ q)")
    propositions.append(f"{r} o {s} (r ∨ s)")
    propositions.append(f"{s} o {p} (s ∨ p)")
    propositions.append(f"{s} o {q} (s ∨ q)")
    propositions.append(f"{s} o {r} (s ∨ r)")
    propositions.append(f"{p} o {q} y {r} (p ∨ q) ∧ r")
    propositions.append(f"{p} o {q} y {s} (p ∨ q) ∧ s")
    propositions.append(f"{p} o {r} y {q} (p ∨ r) ∧ q")
    propositions.append(f"{p} o {r} y {s} (p ∨ r) ∧ s")
    propositions.append(f"{q} o {p} y {r} (q ∨ p) ∧ r")
    propositions.append(f"{q} o {p} y {s} (q ∨ p) ∧ s")
    propositions.append(f"{q} o {r} y {p} (q ∨ r) ∧ p")
    propositions.append(f"{q} o {r} y {s} (q ∨ r) ∧ s")
    propositions.append(f"{r} o {p} y {q} (r ∨ p) ∧ q")
    propositions.append(f"{r} o {p} y {s} (r ∨ p) ∧ s")
    propositions.append(f"{r} o {q} y {p} (r ∨ q) ∧ p")
    propositions.append(f"{s} o {p} y {q} (r ∨ p) ∧ q")
    propositions.append(f"{r} o {q} y {s} (r ∨ q) ∧ s")
    propositions.append(f"{s} o {q} y {p} (s ∨ q) ∧ p")
    propositions.append(f"{s} o {r} y {p} (s ∨ r) ∧ p")
    propositions.append(f"{s} o {p} y {q} (s ∨ p) ∧ q")
    propositions.append(f"{s} o {q} y {r} (s ∨ q) ∧ r")
    propositions.append(f"{p} o {q} si y solo si {r} (p ∨ q) ↔  r")
    propositions.append(f"{p} o {s} si y solo si {r} (p ∨ q) ↔  r")
    propositions.append(f"{p} o {r} si y solo si {q} (p ∨ r) ↔  q")
    propositions.append(f"{p} o {r} si y solo si {s} (p ∨ r) ↔  s") 
    propositions.append(f"{q} o {p} si y solo si {r} (q ∨ p) ↔  r") 
    propositions.append(f"{q} o {r} si y solo si {p} (q ∨ r) ↔  p") 
    propositions.append(f"{r} o {p} si y solo si {q} (r ∨ p) ↔  q") 
    propositions.append(f"{r} o {q} si y solo si {p} (r ∨ q) ↔  p")
    propositions.append(f"{p}, o {q} si y solo si no {r} (p ∨ q) ↔ ¬r") 
    propositions.append(f"{p}, o {r} si y solo si no {q} (p ∨ r) ↔ ¬q") 
    propositions.append(f"{q}, o {p} si y solo si no {r} (q ∨ p) ↔ ¬r")  
    propositions.append(f"{r}, o {p} si y solo si no {q} (r ∨ p) ↔ ¬q") 
    propositions.append(f"{r}, o {q} si y solo si no {p} (r ∨ q) ↔ ¬p")
    propositions.append(f"{q}, o {r} si y solo si no {p} (q → r) ↔ ¬p")
    propositions.append(f"{p} o {q} y no {r} (p ∨ q) ∧ ¬r")
    propositions.append(f"{p} o {r} y no {q} (p ∨ r) ∧ ¬q")
    propositions.append(f"{q} o {p} y no {r} (q ∨ p) ∧ ¬r")
    propositions.append(f"{q} o {r} y no {p} (q ∨ r) ∧ ¬p")
    propositions.append(f"{r} o {p} y no {q} (r ∨ p) ∧ ¬q")
    propositions.append(f"{r} o {q} y no {p} (r ∨ q) ∧ ¬p")



    
    all_propositions.extend(propositions)
    
    propositions = []
    propositions.append(f"{p} y {q} (p ∧ q)")
    propositions.append(f"{p} y {r} (p ∧ r)")
    propositions.append(f"{q} y {p} (q ∧ p)")
    propositions.append(f"{q} y {r} (q ∧ r)")
    propositions.append(f"{r} y {p} (r ∧ p)")
    propositions.append(f"{r} y {q} (r ∧ q)")
    propositions.append(f"{p} y {q} o {r} (p ∧ q) ∨ r")
    propositions.append(f"{p} y {r} o {q} (p ∧ r) ∨ q")
    propositions.append(f"{q} y {p} o {r} (q ∧ p) ∨ r")
    propositions.append(f"{q} y {r} o {p} (q ∧ r) ∨ p")
    propositions.append(f"{r} y {p} o {q} (r ∧ p) ∨ q")
    propositions.append(f"{r} y {q} o {p} (r ∧ q) ∨ p")
    propositions.append(f"{r} y {q} si y solo si {p} (r ∧ q) ↔  p")
    propositions.append(f"{p}, y {q} si y solo si no {r} (p ∧ q) ↔ ¬r") 
    propositions.append(f"{p}, y {r} si y solo si no {q} (p ∧ r) ↔ ¬q") 
    propositions.append(f"{q}, y {p} si y solo si no {r} (q ∧ p) ↔ ¬r")  
    propositions.append(f"{r}, y {p} si y solo si no {q} (r ∧ p) ↔ ¬q") 
    propositions.append(f"{r}, y {q} si y solo si no {p} (r ∧ q) ↔ ¬p")
    propositions.append(f"{q}, y {r} si y solo si no {p} (q ∧ r) ↔ ¬p")
    propositions.append(f"{p}, y {q} o no {r} (p ∧ q)  ∨ ¬r") 
    propositions.append(f"{p}, y {r} o no {q} (p ∧ r)  ∨ ¬q") 
    propositions.append(f"{q}, y {p} o no {r} (q ∧ p)  ∨ ¬r")  
    propositions.append(f"{r}, y {p} o no {q} (r ∧ p)  ∨ ¬q") 
    propositions.append(f"{r}, y {q} o no {p} (r ∧ q)  ∨ ¬p")
    propositions.append(f"{q}, y {r} o no {p} (q ∧ r)  ∨ ¬p")
    propositions.append(f"{p}, y {q} si {r} (p ∧ q)  → r") 
    propositions.append(f"{p}, y {r} si {q} (p ∧ r)  → q") 
    propositions.append(f"{q}, y {p} si {r} (q ∧ p)  → r")  
    propositions.append(f"{r}, y {p} si {q} (r ∧ p)  → q") 
    propositions.append(f"{r}, y {q} si {p} (r ∧ q)  → p")
    propositions.append(f"{q}, y {r} si {p} (q ∧ r)  → p")
    propositions.append(f"{p}, y {q} si no {r} (p ∧ q)  → ¬r") 
    propositions.append(f"{p}, y {r} si no {q} (p ∧ r)  → ¬q") 
    propositions.append(f"{q}, y {p} si no {r} (q ∧ p)  → ¬r")  
    propositions.append(f"{r}, y {p} si no {q} (r ∧ p)  → ¬q") 
    propositions.append(f"{r}, y {q} si no {p} (r ∧ q)  → ¬p")
    propositions.append(f"{q}, y {r} si no {p} (q ∧ r)  → ¬p")

    

    all_propositions.extend(propositions)
    
    propositions = []
    propositions.append(f"{p}, si {q} (p → q)")
    propositions.append(f"{p}, si {r} (p → r)")
    propositions.append(f"{p}, si {s} (p → s)")
    propositions.append(f"{q}, si {p} (q → p)")
    propositions.append(f"{q}, si {r} (q → r)")
    propositions.append(f"{q}, si {s} (q → s)")
    propositions.append(f"{r}, si {p} (r → p)")
    propositions.append(f"{r}, si {q} (r → q)")
    propositions.append(f"{r}, si {s} (r → s)")
    propositions.append(f"{s}, si {p} (s → p)")
    propositions.append(f"{s}, si {q} (s → q)")
    propositions.append(f"{s}, si {r} (s → r)")
    propositions.append(f"{p}, si {q} y {r} (p → q) ∧ r")
    propositions.append(f"{p}, si {q} y {s} (p → q) ∧ s")
    propositions.append(f"{p}, si {r} y {q} (p → r) ∧ q")
    propositions.append(f"{p}, si {r} y {s} (p → r) ∧ s")
    propositions.append(f"{q}, si {p} y {r} (q → p) ∧ r")
    propositions.append(f"{q}, si {r} y {p} (q → r) ∧ p")
    propositions.append(f"{r}, si {p} y {q} (r → p) ∧ q")
    propositions.append(f"{r}, si {q} y {p} (r → q) ∧ p")
    propositions.append(f"{p}, si {q} o {r} (p → q) ∨ r")
    propositions.append(f"{p}, si {r} o {q} (p → r) ∨ q")
    propositions.append(f"{q}, si {p} o {r} (q → p) ∨ r")
    propositions.append(f"{q}, si {r} o {p} (q → r) ∨ p")
    propositions.append(f"{r}, si {p} o {q} (r → p) ∨ q")
    propositions.append(f"{r}, si {q} o {p} (r → q) ∨ p")
    propositions.append(f"{p}, si {q} si y solo si {r} (p → q) ↔  r")
    propositions.append(f"{p}, si {r} si y solo si {q} (p → r) ↔  q")
    propositions.append(f"{q}, si {p} si y solo si {r} (q → p) ↔  r")
    propositions.append(f"{q}, si {r} si y solo si {p} (q → r) ↔  p")
    propositions.append(f"{r}, si {p} si y solo si {q} (r → p) ↔  q")
    propositions.append(f"{r}, si {q} si y solo si {p} (r → q) ↔  p")
    propositions.append(f"{p}, si {q} y no {r} (p → q ∧ ¬r)" )
    propositions.append(f"{p}, si {r} y no {q} (p → r ∧ ¬q)")
    propositions.append(f"{q}, si {p} y no {r} (q → p ∧ ¬r)")
    propositions.append(f"{q}, si {r} y no {p} (q → r ∧ ¬p)") 
    propositions.append(f"{r}, si {p} y no {q} (r → p ∧ ¬q)")
    propositions.append(f"{r}, si {q} y no {p} (r → q ∧ ¬p)")
    propositions.append(f"{p}, si no {q} y no {r} (p → ¬q ∧ ¬r)")
    propositions.append(f"{q}, si no {p} y no {r} (q → ¬p ∧ ¬r)") 
    propositions.append(f"{r}, si no {p} y no {q} (r → ¬p ∧ ¬q)") 
    propositions.append(f"{p}, si {q} o no {r} (p → q ∨ ¬r)") 
    propositions.append(f"{p}, si {r} o no {q} (p → r ∨ ¬q)") 
    propositions.append(f"{q}, si {p} o no {r} (q → p ∨ ¬r)") 
    propositions.append(f"{q}, si {r} o no {p} (q → r ∨ ¬p)") 
    propositions.append(f"{r}, si {p} o no {q} (r → p ∨ ¬q)") 
    propositions.append(f"{r}, si {q} o no {p} (r → q ∨ ¬p)")
    propositions.append(f"{s}, si {q} o no {p} (s → q ∨ ¬p)")
    propositions.append(f"{s}, si {q} o no {p} (s → q ∨ ¬p)") 
    propositions.append(f"{p}, si {q} si y solo si no {r} (p → q ↔ ¬r)") 
    propositions.append(f"{p}, si {r} si y solo si no {q} (p → r ↔ ¬q)") 
    propositions.append(f"{q}, si {p} si y solo si no {r} (q → p ↔ ¬r)")  
    propositions.append(f"{r}, si {p} si y solo si no {q} (r → p ↔ ¬q)") 
    propositions.append(f"{r}, si {q} si y solo si no {p} (r → q ↔ ¬p)")
    propositions.append(f"{q}, si {r} si y solo si no {p} (q → r ↔ ¬p)")

    all_propositions.extend(propositions)
    
    propositions = []
    propositions.append(f"{p} si y solo si {q} (p ↔ q)")
    propositions.append(f"{p} si y solo si {r} (p ↔ r)")
    propositions.append(f"{p} si y solo si {s} (p ↔ s)")
    propositions.append(f"{q} si y solo si {p} (q ↔ p)")
    propositions.append(f"{q} si y solo si {r} (q ↔ r)")
    propositions.append(f"{q} si y solo si {s} (q ↔ s)")
    propositions.append(f"{r} si y solo si {p} (r ↔ p)")
    propositions.append(f"{r} si y solo si {q} (r ↔ q)")
    propositions.append(f"{r} si y solo si {s} (r ↔ s)")
    propositions.append(f"{s} si y solo si {p} (s ↔ q)")
    propositions.append(f"{s} si y solo si {q} (s ↔ q)")
    propositions.append(f"{s} si y solo si {r} (s ↔ q)")
    propositions.append(f"{p} si y solo si {q} o {r} (p ↔ q) ∨ r")
    propositions.append(f"{p} si y solo si {q} o {s} (p ↔ q) ∨ s")
    propositions.append(f"{p} si y solo si {r} o {q} (p ↔ r) ∨ q")
    propositions.append(f"{p} si y solo si {r} o {s} (p ↔ r) ∨ s")
    propositions.append(f"{p} si y solo si {s} o {q} (p ↔ s) ∨ q")
    propositions.append(f"{p} si y solo si {s} o {r} (p ↔ s) ∨ r")
    propositions.append(f"{q} si y solo si {p} o {r} (q ↔ p) ∨ r")
    propositions.append(f"{q} si y solo si {p} o {s} (q ↔ p) ∨ s")
    propositions.append(f"{q} si y solo si {r} o {p}  (q ↔ r) ∨ p")
    propositions.append(f"{q} si y solo si {r} o {s} (q ↔ r) ∨ s")
    propositions.append(f"{q} si y solo si {s} o {r} (q ↔ s) ∨ r")
    propositions.append(f"{q} si y solo si {s} o {p} (q ↔ p) ∨ p")
    propositions.append(f"{r} si y solo si {p} o {q} (r ↔ p) ∨ q")
    propositions.append(f"{r} si y solo si {p} o {s} (r ↔ p) ∨ s")
    propositions.append(f"{r} si y solo si {q} o {p} (r ↔ q) ∨ p")
    propositions.append(f"{r} si y solo si {q} o {s} (r ↔ q) ∨ s")
    propositions.append(f"{s} si y solo si {q} o {r} (s ↔ q) ∨ r")
    propositions.append(f"{s} si y solo si {q} o {p} (s ↔ q) ∨ p")
    propositions.append(f"{s} si y solo si {p} o {r} (s ↔ p) ∨ r")
    propositions.append(f"{s} si y solo si {p} o {q} (s ↔ p) ∨ q")
    propositions.append(f"{s} si y solo si {r} o {p} (s ↔ r) ∨ p")
    propositions.append(f"{s} si y solo si {r} o {q} (s ↔ r) ∨ q")
    propositions.append(f"{p} si y solo si {q} y {r} (p ↔ q) ∧ r")
    propositions.append(f"{p} si y solo si {q} y {s} (p ↔ q) ∧ s")
    propositions.append(f"{p} si y solo si {r} y {q} (p ↔ r) ∧ q")
    propositions.append(f"{p} si y solo si {r} y {s} (p ↔ r) ∧ s")
    propositions.append(f"{q} si y solo si {p} y {r} (q ↔ p) ∧ r")
    propositions.append(f"{q} si y solo si {p} y {s} (q ↔ p) ∧ s")
    propositions.append(f"{q} si y solo si {r} y {p}  (q ↔ r) ∧ p")
    propositions.append(f"{q} si y solo si {r} y {s}  (q ↔ r) ∧ s")
    propositions.append(f"{r} si y solo si {p} y {q} (r ↔ p) ∧ q")
    propositions.append(f"{r} si y solo si {p} y {s} (r ↔ p) ∧ s")
    propositions.append(f"{r} si y solo si {q} y {p} (r ↔ q) ∧ p")
    propositions.append(f"{r} si y solo si {q} y {s} (r ↔ q) ∧ s")
    propositions.append(f"{s} si y solo si {p} y {q} (s ↔ p) ∧ q")
    propositions.append(f"{s} si y solo si {p} y {r} (s ↔ p) ∧ r")
    propositions.append(f"{s} si y solo si {q} y {p} (s ↔ q) ∧ p")
    propositions.append(f"{s} si y solo si {q} y {r} (s ↔ q) ∧ r")
    propositions.append(f"{s} si y solo si {r} y {p} (s ↔ r) ∧ p")
    propositions.append(f"{s} si y solo si {r} y {q} (s ↔ r) ∧ q")
    propositions.append(f"{p} si y solo si {q} si {r} (p ↔ q) → r")
    propositions.append(f"{p} si y solo si {q} si {s} (p ↔ q) → s")
    propositions.append(f"{p} si y solo si {r} si {q} (p ↔ r) → q")
    propositions.append(f"{p} si y solo si {r} si {s} (p ↔ r) → s")
    propositions.append(f"{p} si y solo si {s} si {q} (p ↔ s) → q")
    propositions.append(f"{p} si y solo si {s} si {r} (p ↔ s) → r")
    propositions.append(f"{q} si y solo si {p} si {r} (q ↔ p) → r")
    propositions.append(f"{q} si y solo si {r} si {p}  (q ↔ r) → p")
    propositions.append(f"{r} si y solo si {p} si {q} (r ↔ p) → q")
    propositions.append(f"{r} si y solo si {q} si {p} (r ↔ q) → p")
    propositions.append(f"{s} si y solo si {q} si {r} (r ↔ q) → r")
    propositions.append(f"{s} si y solo si {p} si {r} (r ↔ p) → r")





    all_propositions.extend(propositions)
    
    # Mostrar todas las proposiciones moleculares en una ventana emergente
    window = tk.Tk()
    window.title("QuatumPreposicional")
    window.geometry("700x500")
    window.iconbitmap("C:/Users/ElAdagioDeJP/Pictures/Trabajos/Atomo.ico")
    text_area = scrolledtext.ScrolledText(window, width=80, height=30)
    text_area.insert(tk.INSERT, "\n".join(all_propositions))
    text_area.pack()
# Crear una ventana principal
window = tk.Tk()
window.title("QuatumPreposicional")
window.geometry("800x600")
window.config(bg="DarkGoldenrod1")
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()
window.geometry(f"800x600+0+0")
window.resizable (False,False)
window.iconbitmap("C:/Users/ElAdagioDeJP/Pictures/Trabajos/Atomo.ico")

# Crear una etiqueta para el título
title_label = tk.Label(window,bg="DarkGoldenrod1" ,text="Programa de proposiciones lógicas", font=("Arial", 18))
title_label.place(x= 10,y=10)

# Crear una etiqueta para las instrucciones
instructions_label = tk.Label(window,bg="DarkGoldenrod1" ,text="Ingrese cuatro proposiciones atómicas (p, q, r, s)", font=("Arial", 13))
instructions_label.place(x=10,y=40)

# Crear etiquetas para los cuadros de texto
p_label = tk.Label(window,bg="DarkGoldenrod1" , text="p", font=("Arial", 15))
p_label.place(x=120,y=60)
p_entry = tk.Entry(window, font=("Arial", 14), width=20)
p_entry.insert(0, "")
p_entry.place(x=10,y=90)

q_label = tk.Label(window,bg="DarkGoldenrod1" , text="q", font=("Arial", 15))
q_label.place(x=120,y=120)
q_entry = tk.Entry(window, font=("Arial", 14), width=20)
q_entry.insert(0, "")
q_entry.place(x=10,y=150)

r_label = tk.Label(window, bg="DarkGoldenrod1" , text="r", font=("Arial", 15))
r_label.place(x=120,y=180)
r_entry = tk.Entry(window, font=("Arial", 14), width=20)
r_entry.insert(0, "")
r_entry.place(x=10,y=210)

s_label = tk.Label(window, bg="DarkGoldenrod1" ,text="s", font=("Arial", 15))
s_label.place(x=120,y=240)
s_entry = tk.Entry(window, font=("Arial" ,14), width=20)
s_entry.insert(0, "")
s_entry.place(x=10,y=270)
# Crear etiqueta para mostrar las proposiciones moleculares
propositions_label = tk.Label(window, text="", font=("Arial", 14),bg="DarkGoldenrod1")
propositions_label.place(x=265,y=260)

# Crear botones para cada conectivo lógico
negation_button = tk.Button(window, bg="gold", text="Negación", font=("Arial", 14), command=lambda: show_propositions("negación"), width=10, height=1)
negation_button.place(x=450,y=40)

disjunction_button = tk.Button(window, bg="gold", text="Disyunción", font=("Arial", 14), command=lambda: show_propositions("disyunción"), width=10, height=1)
disjunction_button.place(x=620,y=40)

conjunction_button = tk.Button(window,  bg="gold",text="Conjunción", font=("Arial", 14), command=lambda: show_propositions("conjunción"), width=10, height=1)
conjunction_button.place(x=450,y=120)

conditional_button = tk.Button(window,  bg="gold",text="Condicional", font=("Arial", 14), command=lambda: show_propositions("condicional"), width=10, height=1)
conditional_button.place(x=620, y=120)

biconditional_button = tk.Button(window,  bg="gold", text="Bicondicional", font=("Arial", 14), command=lambda: show_propositions("bicondicional"), width=10, height=1)
biconditional_button.place(x=450,y=200)

# Crear botón para borrar las proposicion
clear_button = tk.Button(window, bg="tomato",text="Borrar", font=("Arial", 14), command=clear_propositions, width=6, height=1)
clear_button.place(x=300,y = 110)
automatic_button = tk.Button(window, bg="chartreuse2",text="Automático", font=("Arial", 14), command=show_all_propositions, width=10, height=1)
automatic_button.place(x=620,y=200)


# Ejecutar el bucle principal de la interfaz gráfica
window.mainloop()